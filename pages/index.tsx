import { useQuery } from "@apollo/client";
import { AnimatePresence, motion } from "framer-motion";
import { GetStaticProps } from "next";
import Head from "next/head";
import { ReactElement } from "react";
import { ErrorBanner } from "../components/ErrorBanner";
import { LoadingSpinner } from "../components/LoadingSpinner";
import { PeopleData } from "../components/PeopleData";
import { InitialPeople } from "../components/PeopleOverview";
import { client } from "../graphql/client";
import { GET_ALL_PEOPLE } from "../graphql/queries/getAllPeople";
import { GET_INITIAL_PEOPLE } from "../graphql/queries/getInitialPeople";
import { GET_PEOPLE_DETAILS } from "../graphql/queries/getPeopleDetails";

export default function Home({ peopleData }): ReactElement {
  /*
   * This query will get all the extra people
    ? If you are using VsCode place the cursor over GET_ALL_PEOPLE and 
    ? modify anything to test what a failed request would look like
   */
  const { error, data, loading } = useQuery(GET_ALL_PEOPLE, {
    client: client,
  });

  /*
   * Fetching the data here will allow the app to process only 2 main requests every time it's rendered
   */
  const {
    data: generalData,
    loading: secQueryLoading,
    error: secQueryError,
  } = useQuery(GET_PEOPLE_DETAILS, {
    client: client,
  });

  return (
    <>
      <Head>
        <title>Ravn Challenge</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header className="bg-ravn-black text-white py-4 px-10">
        <h1 className="font-bold text-2xl ">Ravn Star Wars Registry</h1>
      </header>

      <main className="flex">
        {/* //* Assumed the expected element's responsive width */}
        <div className="border-r-2 min-h-screen w-full sm:max-w-[40%] md:max-w-[30%]">
          {peopleData.map((r) => (
            <div key={r.id}>
              <InitialPeople peopleData={r} />
            </div>
          ))}

          {/* //* Show the loading spinner (while awaiting data) */}
          {loading && <LoadingSpinner />}

          {/* //* Show the error message (if the query fails) */}
          {error && <ErrorBanner />}

          {/* //* Only show the data when it's defined and was successfully fetched */}
          {!loading &&
            !error &&
            data.allPeople.people.map((p) => (
              <div key={p.id}>
                <InitialPeople peopleData={p} />
              </div>
            ))}
        </div>
        {!secQueryLoading && !secQueryError && (
          <AnimatePresence>
            <motion.div
              className="hidden sm:block sm:w-full"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
            >
              <PeopleData
                allPeopleDetails={generalData.allPeople.people}
                loading={secQueryLoading}
                error={secQueryLoading}
              />
            </motion.div>
          </AnimatePresence>
        )}
      </main>
    </>
  );
}

/* 
  * Using NextJs built-in functionality data-fetching
  ? Next requires this function to be on the same page as where the data will be used
*/

export const getStaticProps: GetStaticProps = async () => {
  const { data } = await client.query({
    query: GET_INITIAL_PEOPLE,
  });

  if (!data)
    return {
      notFound: true,
    };

  return {
    props: {
      peopleData: data.allPeople.people,
    },
  };
};
